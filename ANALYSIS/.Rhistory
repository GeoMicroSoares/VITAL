full.names = T)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(readxl)
library(dplyr)
library(data.table)
library(UpSetR)
library(tidyverse)
#list all VITAL folders
vital_dir = list.files("C:/Users/massa/Desktop/VITAL/DATA/WES Analysis/",
pattern= "VITAL",
full.names = T, include.dirs = T)
for (i in vital_dir){print(i)}
for (i in vital_dir){list.files(i,
pattern = "ClinVar",
full.names = T)}
for (i in vital_dir){list.files(i,
pattern = "ClinVar",
full.names = T)}
i
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
print(tmp)}
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
print(tmp)
#list all VITAL folders
vital_dir = list.files("C:/Users/massa/Desktop/VITAL/DATA/WES Analysis/",
pattern= "VITAL",
full.names = T, include.dirs = T)
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
print(tmp_name)
}
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
print(tmp_name)
}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
}}
#list all VITAL folders
vital_dir = list.files("C:/Users/massa/Desktop/VITAL/DATA/WES Analysis/",
pattern= "VITAL",
full.names = T, include.dirs = T)
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
}}
df=read_excel(tmp)
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
}}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
df=read_excel(tmp)
}}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
# print(tmp)
df=read_excel(tmp)
}}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
# df=read_excel(tmp)
}}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
class(tmp)
# df=read_excel(tmp)
}}
#list all VITAL folders
vital_dir = list.files("C:/Users/massa/Desktop/VITAL/DATA/WES Analysis/",
pattern= "VITAL",
full.names = T, include.dirs = T)
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
print(a)
print(tmp)
print(as.character(tmp))
# df=read_excel(tmp)
}}
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
# print(a)
# print(tmp)
# print(as.character(tmp))
df=read_excel(as.character(tmp))
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
tmp
#extract only ClinVar tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "ClinVar",
full.names = T)
# print(tmp)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
# print(tmp_name)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
# print(a)
# print(tmp)
# print(as.character(tmp))
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(readxl)
library(dplyr)
library(data.table)
library(UpSetR)
library(tidyverse)
#list all VITAL folders
vital_dir = list.files("C:/Users/massa/Desktop/VITAL/DATA/WES Analysis/",
pattern= "VITAL",
full.names = T, include.dirs = T)
#extract only Predicted Aminoacid Change tables
for (i in vital_dir){
tmp=list.files(i,
pattern = "Aminoacid",
full.names = T)
tmp_name = sapply(strsplit(i, "/"), tail, 1)
#import ClinVar tables
#name each with sample name
for (a in tmp_name){
df=read_excel(tmp)
df$Sample=as.character(tmp_name)
#call it by its right name
assign(tmp_name, df)
#keep a first row for the merge later
if (a == "VITAL1"){
first_row=head(df,1)
}
#clean up
rm(df)
}
}
#create master df
mVITAL=rbind(VITAL1,VITAL2,VITAL3,VITAL4,VITAL5,
VITAL6,VITAL7,VITAL8,VITAL9,VITAL10,
VITAL11,VITAL12,VITAL14,VITAL15,
VITAL16,VITAL17,VITAL18,VITAL19,VITAL20,
VITAL21,VITAL22,VITAL23,VITAL24,VITAL25,
VITAL26,VITAL27,VITAL28,VITAL29)
#turn Sample column into a binary matrix, keeping Phenotype and Gender
#retrieve frequency table
freq_smVITAL= mVITAL %>%
count(Sample, `Homo sapiens (hg38) _Gene`) %>%
spread(Sample, n, fill=0)
#retrieve contingency table
abs_smVITAL= mVITAL %>%
count(Sample, `Homo sapiens (hg38) _Gene`) %>%
spread(Sample, n, fill=0) %>%
mutate_if(is.numeric, ~1 * (. > 0)) %>%
as.data.frame()
#turn new columns into integers (UpsetR-specific)
for(i in 2:ncol(abs_smVITAL)){
abs_smVITAL[ , i] <- as.integer(abs_smVITAL[ , i])
}
#add metadata to master df
md=read_excel("C:/Users/massa/Desktop/VITAL/LVNC Samples Inventory_simplified.xlsx",
sheet="Folha3")
mVITAL$Phenotype=md$Phenotype[match(mVITAL$Sample, md$`Project Code`)]
mVITAL$Gender=md$Gender[match(mVITAL$Sample, md$`Project Code`)]
#plot upsetr plot with metadata, save to image
# png("vital_upsetr.png",
#     width = 3500, height = 2000,
#     res = 300)
upset(abs_smVITAL, nsets = 28,
order.by = "freq",
nintersects = 200,
set.metadata = list(data = md,
plots = list(
list(
type = "matrix_rows",
column = "Phenotype",
assign = 10,
colors = c(LVNC = "green",
Control = "navy",
`LVNC/HCM` = "purple")),
list(
type = "heat",
column = "Gender",
assign = 10,
colors = c(M = "red",
F = "yellow")
)
)),
mb.ratio = c(.35, .65),
)
# # 3. Close the file
# dev.off()
#get vector list of `CLNDISDB clinvar_20191118.vcf` entries associated to Controls
ctrl_sv = mVITAL$`Homo sapiens (hg38) _Gene`[mVITAL$Phenotype == "Control"]
#remove rows
f_mVITAL <- filter(mVITAL, !`Homo sapiens (hg38) _Gene` %in% ctrl_sv)
f_abs_smVITAL= f_mVITAL %>%
count(Sample, `Homo sapiens (hg38) _Gene`) %>%
spread(Sample, n, fill=0) %>%
mutate_if(is.numeric, ~1 * (. > 0)) %>%
as.data.frame()
f_freq_smVITAL= f_mVITAL %>%
count(Sample, `Homo sapiens (hg38) _Gene`) %>%
spread(Sample, n, fill=0)
#unique genes NOT in controls, shared only by LVNC and LVNC/HCM
length(unique(f_mVITAL$`Homo sapiens (hg38) _Gene`))
#turn new columns into integers (UpsetR-specific)
for(i in 2:ncol(f_abs_smVITAL)){
f_abs_smVITAL[ , i] <- as.integer(f_abs_smVITAL[ , i])
}
# png("f_vital_upsetr.png",
#     width = 3500, height = 2000,
#     res = 300)
upset(f_abs_smVITAL, nsets = 28,
order.by = "freq",
#43 found for > 1 intersection
nintersects = 43,
set.metadata = list(data = md,
plots = list(
list(
type = "matrix_rows",
column = "Phenotype",
assign = 10,
colors = c(LVNC = "green",
`LVNC/HCM` = "purple")),
list(
type = "heat",
column = "Gender",
assign = 10,
colors = c(M = "red",
F = "yellow")
)
)),
mb.ratio = c(.35, .65),
)
# # 3. Close the file
# dev.off()
f_abs_smVITAL_2 = as.data.frame(f_abs_smVITAL)
f_abs_smVITAL_2[2:16] <- lapply(f_abs_smVITAL_2[2:16], as.numeric)
f_abs_smVITAL_2$`Homo sapiens (hg38) _Gene`[is.na(f_abs_smVITAL_2$`Homo sapiens (hg38) _Gene`)] <- "no ID"
rownames(f_abs_smVITAL_2) <- f_abs_smVITAL_2[,1]
f_abs_smVITAL_2[,1] <- NULL
two_or_more_spl_list_f_abs_smVITAL = row.names(f_abs_smVITAL_2[rowSums(f_abs_smVITAL_2) > 1,])
two_or_more_spl_f_freq_smVITAL = filter(f_freq_smVITAL,
`Homo sapiens (hg38) _Gene` %in% two_or_more_spl_list_f_abs_smVITAL)
length(two_or_more_spl_f_freq_smVITAL$`Homo sapiens (hg38) _Gene`)
print(unique(two_or_more_spl_f_freq_smVITAL$`Homo sapiens (hg38) _Gene`),
row.names = FALSE, quote = F)
two_or_more_spl_f_freq_smVITAL
library(kableExtra)
kable(two_or_more_spl_f_freq_smVITAL) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
kable(two_or_more_spl_f_freq_smVITAL) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
View(two_or_more_spl_f_freq_smVITAL)
kable(two_or_more_spl_f_freq_smVITAL) %>%
rename(`Homo sapiens (hg38) _Gene` = Gene) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
two_or_more_spl_f_freq_smVITAL %>%
rename(`Homo sapiens (hg38) _Gene` = Gene) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
two_or_more_spl_f_freq_smVITAL %>%
rename(Gene = `Homo sapiens (hg38) _Gene`) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
library(pander)
install.packages("pander")
library(pander)
two_or_more_spl_f_freq_smVITAL %>%
rename(Gene = `Homo sapiens (hg38) _Gene`) %>%
# mutate_if(is.numeric, function(x) {
#   cell_spec(x, bold = T,
#             color = spec_color(x, end = 0.9),
#             font_size = spec_font_size(x))
# })
emphasize.strong.cells(which(two_or_more_spl_f_freq_smVITAL == 1,
arr.ind = TRUE)) %>%
mutate(Gene = cell_spec(Gene, "html", color = ifelse(x > 0, "red",))) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
cell_spec(x == 1, bold = T)}) %>%
two_or_more_spl_f_freq_smVITAL %>%
rename(Gene = `Homo sapiens (hg38) _Gene`) %>%
mutate_if(is.numeric, function(x) {
cell_spec(x == 1, bold = T)}) %>%
mutate(Gene = cell_spec(Gene, "html", color = ifelse(x > 0, "red",))) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
two_or_more_spl_f_freq_smVITAL %>%
rename(Gene = `Homo sapiens (hg38) _Gene`) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
full_width = F)
